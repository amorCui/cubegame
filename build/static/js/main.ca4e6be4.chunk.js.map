{"version":3,"sources":["resources/imgs/textures/wall.jpg","serviceWorker.js","components/ThreeBim/ThreeBim.js","components/App/App.js","router/Router.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","ThreeBim","props","state","options","renderer","width","height","camera","scene","light","minMapCamera","keyEventListener","innerWidth","innerHeight","this","THREE","antialias","setSize","setClearColor","setState","document","getElementById","appendChild","domElement","aspect","updateProjectionMatrix","minMapCameraOption","cameraOptions","left","right","top","bottom","position","set","up","add","objOptions","objGroup","wall","materialArr","i","push","map","load","wallTexture","h","geometry","objSize","lenght","mesh1","mesh2","mesh3","mesh4","x","z","y","lookAt","axesHelper","cameraHelper","requestAnimationFrame","animate","timestamp","setViewport","render","insetWidth","insetHeight","clearDepth","setScissorTest","setScissor","that","fetch","then","res","json","data","console","log","init","initCamera","initScene","initLight","initObject","initMinMap","initHelper","animation","cubeSize","initThree","addEventListener","e","key","go","id","React","Component","App","BasicRoute","exact","path","component","ReactDOM","Router","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca4e6be4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wall.80656b31.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport * as THREE from 'three';\r\nimport wallTexture from '../../resources/imgs/textures/wall.jpg'\r\n\r\nclass ThreeBim extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            options: null,\r\n            renderer: null,\r\n            width: null,\r\n            height: null,\r\n            camera: null,\r\n            scene: null,\r\n            light: null,\r\n            minMapCamera: null,\r\n            keyEventListener: true\r\n        };\r\n    }\r\n\r\n\r\n    init(options) {\r\n        var width = window.innerWidth;\r\n        var height = window.innerHeight;\r\n        if(this.state.renderer === null){\r\n            var renderer = new THREE.WebGLRenderer({\r\n                antialias: true\r\n            });\r\n            \r\n            renderer.setSize(width, height);\r\n            renderer.setClearColor(0x000000, 1.0);\r\n            this.setState((state) => ({\r\n                width: width,\r\n                height: height,\r\n                renderer: renderer\r\n            }));\r\n            document.getElementById('canvas-frame').appendChild(this.state.renderer.domElement);\r\n            \r\n        }else{\r\n            var renderer = this.state.renderer;\r\n            renderer.setSize(width, height);\r\n            this.setState((state) => ({\r\n                width: width,\r\n                height: height,\r\n                renderer: renderer\r\n            }));\r\n        }\r\n\r\n        // 渲染器执行render方法的时候会读取相机对象的投影矩阵属性projectionMatrix\r\n        // 但是不会每渲染一帧，就通过相机的属性计算投影矩阵(节约计算资源)\r\n        // 如果相机的一些属性发生了变化，需要执行updateProjectionMatrix ()方法更新相机的投影矩阵\r\n        var camera = this.state.camera;\r\n        if(camera){\r\n            camera.aspect = window.innerWidth/window.innerHeight;\r\n            camera.updateProjectionMatrix ();\r\n            this.setState((state) => ({\r\n                camera: camera\r\n            }));\r\n        }\r\n\r\n        var minMapCameraOption = this.state.options.cameraOptions.minMapCamera;\r\n        var minMapCamera = this.state.minMapCamera;\r\n        if(minMapCamera){\r\n            minMapCamera.left = window.innerWidth / minMapCameraOption.left;\r\n            minMapCamera.right = window.innerWidth / minMapCameraOption.right;\r\n            minMapCamera.top = window.innerHeight / minMapCameraOption.top;\r\n            minMapCamera.bottom = window.innerHeight / minMapCameraOption.bottom;\r\n            minMapCamera.updateProjectionMatrix ();\r\n            this.setState((state) => ({\r\n                minMapCamera: minMapCamera\r\n            }));\r\n        }\r\n        \r\n       \r\n    }\r\n\r\n\r\n    initCamera(options) {\r\n        var camera = new THREE.PerspectiveCamera(45, this.state.width / this.state.height, 1, 10000);\r\n        camera.position.set(0, 20, 0);\r\n        camera.up.set(0, 1, 0);//正视\r\n\r\n        this.setState((state) => ({\r\n            camera: camera\r\n        }));\r\n    }\r\n\r\n    initScene() {\r\n        this.setState((state) => ({\r\n            scene: new THREE.Scene()\r\n        }));\r\n    }\r\n\r\n    initLight(options) {\r\n        var light = new THREE.AmbientLight(0xFFFFFF);\r\n        light.position.set(300, 300, 0);\r\n        var scene = this.state.scene;\r\n        scene.add(light);\r\n        this.setState((state) => ({\r\n            light: light,\r\n            scene: scene\r\n        }));\r\n    }\r\n\r\n    initObject(objOptions) {\r\n        var objGroup = new THREE.Group();//围墙\r\n\r\n        // for (var opt of objOptions.objs) {\r\n        //     var geometry = new THREE.CubeGeometry(objOptions.objSize.lenght, objOptions.objSize.width, objOptions.objSize.height);\r\n        //     var material = new THREE.MeshPhongMaterial({\r\n        //         color: parseInt(opt.color)\r\n        //     });\r\n        //     var mesh = new THREE.Mesh(geometry, material);\r\n        //     mesh.position.set(opt.position.x * objOptions.objSize.lenght, opt.position.y * objOptions.objSize.width, opt.position.z * objOptions.objSize.height);\r\n        //     objGroup.add(mesh);\r\n        //     // var edges = new THREE.EdgesHelper( mesh, 0x1535f7 );//设置边框，可以旋转\r\n        //     // objGroup.add(edges);\r\n        //     // console.log('edges',edges);\r\n        //     // console.log(\"mesh.position\",mesh.position);\r\n        // }\r\n        var wall = objOptions.wall;\r\n        // var material = new THREE.MeshPhongMaterial({\r\n        //     color: parseInt(wall.color)\r\n        // });\r\n        var materialArr = [];\r\n        for (let i = 0; i < 6; i++){\r\n            materialArr.push( new THREE.MeshBasicMaterial({\r\n                 map: new THREE.TextureLoader().load( wallTexture )//将图片纹理贴上\r\n            }));\r\n         }\r\n        for(var h = wall.height; h >= 0; h--){\r\n            for(var i = -wall.width / 2;i <= wall.width / 2  ; i++){\r\n                var geometry = new THREE.CubeGeometry(objOptions.objSize.lenght, objOptions.objSize.width, objOptions.objSize.height);\r\n                var mesh1 = new THREE.Mesh(geometry, materialArr);\r\n                mesh1.position.set(i * objOptions.objSize.lenght, objOptions.objSize.height * h, wall.width / 2 * objOptions.objSize.height);\r\n                objGroup.add(mesh1);\r\n                var mesh2 = new THREE.Mesh(geometry, materialArr);\r\n                mesh2.position.set(i * objOptions.objSize.lenght, objOptions.objSize.height * h, -wall.width / 2 * objOptions.objSize.height);\r\n                objGroup.add(mesh2);\r\n                var mesh3 = new THREE.Mesh(geometry, materialArr);\r\n                mesh3.position.set(wall.width / 2 * objOptions.objSize.height, objOptions.objSize.height * h, i * objOptions.objSize.lenght);\r\n                objGroup.add(mesh3);\r\n                var mesh4 = new THREE.Mesh(geometry, materialArr);\r\n                mesh4.position.set(-wall.width / 2 * objOptions.objSize.height, objOptions.objSize.height * h, i * objOptions.objSize.lenght);\r\n                objGroup.add(mesh4);\r\n            }\r\n        }\r\n        \r\n        var scene = this.state.scene;\r\n        scene.add(objGroup);\r\n        // this.state.scene.add(objGroup);\r\n        this.setState({\r\n            scene:scene\r\n        });\r\n    }\r\n\r\n    initMinMap() {\r\n        var minMapCameraOption = this.state.options.cameraOptions.minMapCamera;\r\n        var minMapCamera =  new THREE.OrthographicCamera(\r\n            window.innerWidth / minMapCameraOption.left, \r\n            window.innerWidth / minMapCameraOption.right, \r\n            window.innerHeight / minMapCameraOption.top, \r\n            window.innerHeight / minMapCameraOption.bottom, \r\n            1, 1000);\r\n        minMapCamera.position.x = 0;\r\n        minMapCamera.position.z = 0;\r\n        minMapCamera.position.y = 1000;\r\n        // minMapCamera.up.set(0, 0, 1);\r\n        minMapCamera.lookAt(0,0,0);\r\n\r\n        this.setState((state) => ({\r\n            minMapCamera: minMapCamera\r\n        }));\r\n    }\r\n\r\n    initHelper() {\r\n        let axesHelper = new THREE.AxesHelper(10);\r\n        let cameraHelper = new THREE.CameraHelper(this.state.camera);\r\n        // let lightHelper = new THREE.DirectionalLightHelper(0xffffff);\r\n        var scene = this.state.scene;\r\n        scene.add(axesHelper);\r\n        scene.add(cameraHelper);\r\n        // this.scene.add(lightHelper);\r\n\r\n        this.setState({\r\n            scene: scene\r\n        });\r\n    }\r\n\r\n    animation() {\r\n\r\n        const animate = timestamp => {\r\n            // main scene\r\n            this.state.renderer.setClearColor(0x000000, 0);\r\n            this.state.renderer.setViewport(0, 0, window.innerWidth, window.innerHeight);\r\n            // renderer will set this eventually\r\n            // matLine.resolution.set( window.innerWidth, window.innerHeight ); // resolution of the viewport\r\n            this.state.renderer.render(this.state.scene, this.state.camera);\r\n\r\n            // inset scene\r\n            var insetWidth = window.innerWidth / 6; // square\r\n            var insetHeight = window.innerHeight / 6;\r\n\r\n            this.state.renderer.setClearColor(0x222222, 1);\r\n            this.state.renderer.clearDepth(); // important!\r\n            this.state.renderer.setScissorTest(true);\r\n            this.state.renderer.setScissor(120, 120, insetWidth, insetHeight);\r\n            this.state.renderer.setViewport(120, 120, insetWidth, insetHeight);\r\n\r\n            //min map 俯视,\r\n            var minMapCamera = this.state.minMapCamera;\r\n\r\n            // minMapCamera.position.x = 0;\r\n            // minMapCamera.position.z = 0;\r\n            // minMapCamera.position.y = 1000;\r\n            // minMapCamera.up.set(0, 0, 1);\r\n            // this.setState({\r\n            //     minMapCamera: minMapCamera\r\n            // });\r\n            // minMapCamera.position.set(camera.position.);\r\n            // minMapCamera.quaternion.copy( camera.quaternion );\r\n            // renderer will set this eventually\r\n            // matLine.resolution.set( insetWidth, insetHeight ); // resolution of the inset viewport\r\n            // this.state.renderer.render(this.state.scene, this.state.minMapCamera);\r\n            this.state.renderer.render(this.state.scene, minMapCamera);\r\n\r\n            // console.log(\"minMapCamera:\",minMapCamera.position);\r\n\r\n            this.state.renderer.setScissorTest(false);\r\n            window.requestAnimationFrame(animate);\r\n        };\r\n        window.requestAnimationFrame(animate);\r\n    }\r\n\r\n\r\n    initThree() {\r\n        var that = this;\r\n        fetch('./options.json')\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                console.log('data:', data);\r\n                that.setState({\r\n                    options:data\r\n                });\r\n\r\n\r\n                that.init(data);\r\n                that.initCamera(data);\r\n                that.initScene();\r\n                that.initLight(data);\r\n                that.initObject(data.objOptions);\r\n\r\n                that.initMinMap();\r\n\r\n                that.initHelper();\r\n\r\n                that.animation();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 前进\r\n     */\r\n    go(){\r\n        var camera = this.state.camera;\r\n        var minMapCamera = this.state.minMapCamera;\r\n        var cubeSize = this.state.options.objOptions.objSize;\r\n        camera.position.z = camera.position.z - cubeSize.width;\r\n        minMapCamera.position.z = minMapCamera.position.z - cubeSize.width;\r\n        this.setState({\r\n            camera: camera,\r\n            minMapCamera: minMapCamera\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 开始Three\r\n     *\r\n     * @memberof ThreeBim\r\n     */\r\n    componentDidMount() {\r\n        this.initThree();\r\n        window.addEventListener(\"resize\", () => {\r\n            //renderer\r\n            // debugger;\r\n            this.init();\r\n        });\r\n        window.addEventListener(\"keyup\", (e) => {\r\n            if(this.state.keyEventListener){\r\n                this.setState({\r\n                    keyEventListener: false\r\n                });\r\n                switch(e.key){\r\n                    case \"ArrowUp\":\r\n                        this.go();\r\n                        break;\r\n                    case \"ArrowLeft\":\r\n                        break;\r\n                    case \"ArrowDown\":\r\n                        break;\r\n                    case \"ArrowRight\":\r\n                        break;\r\n                    default:\r\n                        console.log('case default');\r\n                }\r\n                this.setState({\r\n                    keyEventListener: true\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id='canvas-frame'>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ThreeBim;\r\n\r\n\r\n","import React from 'react';\n\nimport ThreeBim from '../ThreeBim/ThreeBim';\nimport './App.css';\n\n\n\n\nfunction App() {\n\treturn(\n\t\t<ThreeBim></ThreeBim>\n\t)\n}\n\nexport default App;\n","import React from 'react';\r\nimport {HashRouter, Route, Switch} from 'react-router-dom';\r\nimport App from '../components/App/App';\r\n\r\n\r\n\r\nconst BasicRoute = () => (\r\n    <HashRouter>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={App}/>\r\n            {/* <Route exact path=\"/detail/:talent\" component={Detail}/> */}\r\n        </Switch>\r\n    </HashRouter>\r\n);\r\n\r\nexport default BasicRoute;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport Router from './router/Router';\n\n// ReactDOM.render(<App />, );\n\n\n\nReactDOM.render((\n    <Router/>\n), document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}